"""
Django settings for smbproject project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import secrets
import warnings

import request_logging  # noqa
import sourcedefender  # noqa
from dotenv import dotenv_values

warnings.filterwarnings("ignore")
config = dotenv_values(".env")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get("SECRET_KEY", secrets.token_hex(16))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get("DEBUG") == "1"
# Application definition

INSTALLED_APPS = [
    "Action",
    "rest_framework",
    "sslserver",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django_celery_results",
    "corsheaders",
    "Interval",
    "django.contrib.staticfiles",
    "SendEmail",
    "tenants",
    "UserRoleProfile",
    "Object",
    "Report",
    "Workflows",
    "SLA",
    "TenantConfiguration",
    "django_apscheduler",
    "CrmUploadData",
    "LcmPermission",
    "Testing",
    "Notifications",
    "CallCenter",
    "channels",
    "RegisterCTI",
    "AdvanceConfigCTI",
    "DynamicButton",
    "FormulaField",
    "SMS",
    "KnowledgeBase",
    "Popup",
    "ExposeAPIs",
    "FinesseIntegration",
    "drf_yasg",
    "GoogleIntegration",
    "VoiceBiometricIntegration",
    "Calendar",
    "CrmImportUsers",
    "LogsHistory",
    "RecycleBin",
    "AuditLog",
    "O365Integration",
    "ScanEmail",
    "UserManagement",
    "SearchManagement",
    "AssignmentRule",
    "Mobile",
    "ObjectGenerator",
    "django_user_agents",
    "CalabrioIntegration",
    "QualityManagement",
    "ObjectStandardization",
    "InteractionExposeApi",
]

MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "smbproject.middleware.LoggingWebhookRequestMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsPostCsrfMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
]


ROOT_URLCONF = "smbproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "smbproject.wsgi.application"
ASGI_APPLICATION = "smbproject.routing.application"

REDIS_SENTINEL = config.get("USE_REDIS_SENTINEL", "0") == "1"
REDIS_HOST = config.get("REDIS_HOST", os.environ.get("REDIS_HOST", "localhost"))
REDIS_PORT = config.get("REDIS_PORT", "6379")
REDIS_USERNAME = config.get("REDIS_USER", "")
REDIS_PASSWORD = config.get("REDIS_PASSWORD", "")
REDIS_PROTOCOL = config.get("REDIS_PROTOCOL", "redis")
REDIS_SELECTED_DB = config.get("REDIS_SELECTED_DB", "0")
REDIS_URL = config.get(
    "REDIS_URL",
    f"{REDIS_PROTOCOL}://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_SELECTED_DB}",
)
BROKER_URL = config.get(
    "BROKER_URL",
    f"{REDIS_PROTOCOL}://{REDIS_USERNAME}:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_SELECTED_DB}",
)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [REDIS_URL]},
    },
}
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

if REDIS_SENTINEL:
    SENTINEL_MASTER_NAME = config["SENTINEL_MASTER_NAME"]
    SENTINEL_PASSWORD = config.get("SENTINEL_PASSWORD")
    SENTINEL_PASSWORD = SENTINEL_PASSWORD if SENTINEL_PASSWORD else None
    SENTINEL_HOST = config["SENTINEL_HOST"]
    SENTINELS = [
        (
            item.replace("sentinel://", "").split(":")[0],
            int(item.replace("sentinel://", "").split(":")[1]),
        )
        for item in SENTINEL_HOST.split(",")
    ]
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [
                    {
                        "sentinels": SENTINELS,
                        "master_name": SENTINEL_MASTER_NAME,
                        # "password": SENTINEL_PASSWORD
                    }
                ]
            },
        },
    }
    if SENTINEL_PASSWORD:
        BROKER_URL = ";".join(
            [
                f"sentinel://:{SENTINEL_PASSWORD}@{item[0]}:{item[1]}/0"
                for item in SENTINELS
            ]
        )
        CHANNEL_LAYERS["default"]["CONFIG"]["hosts"][0]["password"] = SENTINEL_PASSWORD
    else:
        BROKER_URL = ";".join(
            [f"sentinel://{item[0]}:{item[1]}/0" for item in SENTINELS]
        )

    BROKER_TRANSPORT_OPTIONS = {
        "master_name": SENTINEL_MASTER_NAME,
    }
    CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = BROKER_TRANSPORT_OPTIONS

    DJANGO_REDIS_CONNECTION_FACTORY = "smbproject.Common.redis.CRMConnectionFactory"
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "OPTIONS": {
                "CLIENT_CLASS": "smbproject.Common.redis.CRMRedisClient",
            },
        }
    }


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        # "ENGINE": "django.db.backends.sqlite3",
        # "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


GEOIP_PATH = BASE_DIR

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# folder static in smbproject
STATIC_ROOT = os.path.join(BASE_DIR, "static")
# custom static folder path anywhere in system
STATIC_PATH = config.get("STATIC_PATH", STATIC_ROOT)
STATIC_URL = "/static/"
# api prefix that will be used by proxy
PROXY_API_PREFIX = config.get("PROXY_API_PREFIX", "/ucrmapi-sso/")

SWAGGER_ENABLE = config.get("SWAGGER_ENABLE", "0") == "1"
if SWAGGER_ENABLE:
    # static url
    STATIC_URL = f"{PROXY_API_PREFIX}static/"


# Image_upload
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_ROOT = os.path.join(STATIC_PATH, "media")
MEDIA_URL = "/media/"
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = [
    "change.allowed.com",
]
# SESSION_COOKIE_SECURE = False

CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = [

# ]
ALLOWED_HOSTS = ["*"]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "RecordPerPage",
    "CurrentPage",
    "ID",
    "Owner",
    "current_page",
    "record_per_page",
]

# REST_FRAMEWORK_DOCS = {"HIDE_DOCS": True}  # Default: False
REST_FRAMEWORK = {
    # other settings...
    "DEFAULT_AUTHENTICATION_CLASSES": [],
    "DEFAULT_PERMISSION_CLASSES": [],
}
EMAIL_HOST = "smtp.gmail.com"

EMAIL_USE_SSL = True
EMAIL_PORT = 465
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

# Django proxy settings
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# global proxy id
PROXY_ID = config.get("PROXY")


DATA_UPLOAD_MAX_MEMORY_SIZE = 26214400

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "USE_SESSION_AUTH": False,
}

REDOC_SETTINGS = {
    "LAZY_RENDERING": True,
}


LOG_DIR = os.path.join(BASE_DIR, "Logs")
if not os.path.isdir(LOG_DIR):
    os.mkdir(LOG_DIR)

THIRD_PARTY_API_LOG_DIR = os.path.join(LOG_DIR, "ThirdpartyAPI")
if not os.path.isdir(THIRD_PARTY_API_LOG_DIR):
    os.mkdir(THIRD_PARTY_API_LOG_DIR)

O_REQUEST_LOG_DIR = os.path.join(LOG_DIR, "OutgoingRequests")
if not os.path.isdir(O_REQUEST_LOG_DIR):
    os.mkdir(O_REQUEST_LOG_DIR)

I_REQUEST_LOG_DIR = os.path.join(LOG_DIR, "IncomingRequests")
if not os.path.isdir(I_REQUEST_LOG_DIR):
    os.mkdir(I_REQUEST_LOG_DIR)

FINESSE_LOG_DIR = os.path.join(LOG_DIR, "FinesseIntegration")
if not os.path.isdir(FINESSE_LOG_DIR):
    os.mkdir(FINESSE_LOG_DIR)

LOGGING_LEVEL = config.get("LOGGING_LEVEL", "ERROR")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "colored": {
            "()": "colorlog.ColoredFormatter",  # colored output
            "format": "%(log_color)s[%(asctime)s] - [%(levelname)-s] - [Line: %(lineno)04d] - [%(module)s] - [%(funcName)s] : %(white)s%(message)s",
            "datefmt": "%d-%m-%Y %H:%M:%S",
        },
        "verbose": {
            "()": "smbproject.logger.StacktraceLogFormatter",
            "format": "[%(asctime)s] - [%(levelname)-s] - [Line: %(lineno)04d] - [%(module)s] - [%(funcName)s] : %(message)s",
            "datefmt": "%d-%m-%Y %H:%M:%S",
        },
        "basic": {
            "format": "[%(asctime)s] - [%(levelname)-s] - [Line: %(lineno)04d] - [%(module)s] - [%(funcName)s] : %(message)s",
            "datefmt": "%d-%m-%Y %H:%M:%S",
        },
        "request": {
            "format": "[%(asctime)s] - [%(levelname)-s] - [%(ROUTE)s] - [%(METHOD)s] - [%(RESPONSE_CODE)s] : %(message)s",
            "datefmt": "%d-%m-%Y %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "colorlog.StreamHandler",
            "formatter": "colored",
            "level": LOGGING_LEVEL,
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": f"{LOG_DIR}/be.log",
            "formatter": "verbose",
            "maxBytes": 5000000,  # ~500mb
            "level": LOGGING_LEVEL,
            "backupCount": 3,
        },
        "file_interval": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": f"{LOG_DIR}/interval.log",
            "formatter": "verbose",
            "maxBytes": 5000000,  # ~500mb
            "level": LOGGING_LEVEL,
            "backupCount": 3,
        },
        "outgoing_request": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": f"{O_REQUEST_LOG_DIR}/outgoing_requests.log",
            "formatter": "basic",
            "maxBytes": 5000000,  # ~500mb
            "backupCount": 0,
            "level": "DEBUG",
        },
        "incoming_request": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": f"{I_REQUEST_LOG_DIR}/incoming_requests.log",
            "formatter": "request",
            "maxBytes": 5000000,  # ~500mb
            "backupCount": 0,
            "level": "DEBUG",
        },
        "thirdparty": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": f"{THIRD_PARTY_API_LOG_DIR}/thirdparty.log",
            "formatter": "basic",
            "level": "INFO",
            "maxBytes": 5000000,  # ~500mb
            "backupCount": 0,
        },
        "finesse": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": f"{FINESSE_LOG_DIR}/finesse_integration.log",
            "formatter": "basic",
            "maxBytes": 5000000,  # ~500mb
            "backupCount": 0,
            "level": "INFO",
        },
    },
    "filters": {
        "sensitive": {
            "()": "smbproject.logger.LoggingSensitiveFilter",
        }
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "propagate": False,
        },
        "daphne": {
            "handlers": [
                "console",
            ],
            "propagate": False,
        },
        "celery": {
            "handlers": ["console"],
            "propagate": True,
        },
        "smbproject.root": {
            "handlers": ["console", "file"],
            "filters": ["sensitive"],
            "propagate": False,
        },
        "smbproject.thirdparty": {
            "handlers": ["console", "thirdparty"],
            "filters": ["sensitive"],
            "propagate": False,
        },
        "smbproject.request.outgoing": {
            "handlers": ["outgoing_request"],
            "filters": ["sensitive"],
            "propagate": False,
        },
        "smbproject.interval": {
            "handlers": ["console", "file_interval"],
            "filters": ["sensitive"],
            "propagate": False,
        },
        "smbproject.webhook": {
            "handlers": ["console", "incoming_request"],
            "filters": ["sensitive"],
            "propagate": False,
        },
        "smbproject.finesse": {
            "handlers": ["console", "finesse"],
            "filters": ["sensitive"],
            "propagate": False,
        },
    },
    "root": {"handlers": ["console"], "level": LOGGING_LEVEL},
}
