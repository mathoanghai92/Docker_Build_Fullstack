{"version":3,"sources":["pages/ConsolidatedViewSettings/ExposeAPIUpdate/exposeAPIUpdate.js"],"names":["options","label","value","ExposeAPICreate","dispatch","useDispatch","userRuleGlobal","useSelector","state","userReducer","category","objectsManagementReducer","selectedObject","$selectedObject","useState","undefined","listObjects","$listObjects","option","$option","isEdit","setIsEdit","checkRule","rule","find","item","_","get","actions","includes","useEffect","loadDataExposeCreate","object_id","page","limit","expose_api_type","Object","keys","length","tempObjects","entries","forEach","_ref","key","val","object","Status","push","Name","_id","_jsxs","Wrapper","children","_jsx","SelectObject","nameBreadcrumb","onChange","_Fragment","Radio","Group","target","optionType","Config","type","ListViewExposeCreate","styled","div","withConfig","displayName","componentId","props","theme","main"],"mappings":"oNAWA,MAAMA,EAAU,CACd,CAAEC,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,eAAgBC,MAAO,iBA2FnBC,UAzFf,WACE,MAAMC,EAAWC,eAEX,eAAEC,GAAmBC,aAAaC,GAAUA,EAAMC,eAClD,SAAEC,GAAaH,aAAaC,GAAUA,EAAMG,4BAC3CC,EAAgBC,GAAmBC,wBAASC,IAC5CC,EAAaC,GAAgBH,mBAAS,KACtCI,EAAQC,GAAWL,mBAAS,WAE5BM,EAAQC,GAAaP,oBAAS,GAE/BQ,EAAaC,KAEfjB,EAAekB,MACZC,GAC+B,sBAA9BC,IAAEC,IAAIF,EAAM,SAAU,KACtBA,EAAKG,QAAQC,SAASN,KAuC9B,OAjCAO,qBAAU,KACJZ,GAAUN,GACZR,EACE2B,aAAqB,CACnBC,UAAWpB,EACXqB,KAAM,EACNC,MAAO,IACPC,gBAAiBjB,IAGvB,GACC,CAACA,EAAQN,EAAgBR,IAK5B0B,qBAAU,KACR,GAAIM,OAAOC,KAAK3B,GAAU4B,OAAS,EAAG,CACpC,IAAIC,EAAc,GAClBH,OAAOI,QAAQ9B,GAAU+B,SAAQC,IAAiB,IAAfC,EAAKC,GAAIF,EAC1CE,EAAIH,SAASI,IACPA,EAAOC,QACTP,EAAYQ,KAAK,CACf9C,MAAO4C,EAAOG,KACd9C,MAAO2C,EAAOI,KAElB,GACA,IAEJhC,EAAasB,EACf,IACC,CAAC7B,IAGFwC,eAACC,EAAO,CAAAC,SAAA,CACNC,cAACC,IAAY,CACXC,eAAe,oBACfC,SAzBmBtD,IACvBW,EAAgBX,EAAM,EAyBlBc,YAAaA,IAEdJ,GACCsC,eAAAO,WAAA,CAAAL,SAAA,CACEC,cAACK,IAAMC,MAAK,CACV3D,QAASA,EACTwD,SAAWtD,GAAUiB,EAAQjB,EAAM0D,OAAO1D,OAC1CA,MAAOgB,EACP2C,WAAW,WAEbR,cAACS,IAAM,CACLC,KAAM7C,EACNN,eAAgBA,EAChBQ,OAAQA,EACRC,UAAWA,EACXC,UAAWA,IAEb+B,cAACW,IAAoB,CACnBD,KAAM7C,EACNN,eAAgBA,EAChBS,UAAWA,EACXC,UAAWA,SAMvB,EAIA,MAAM6B,EAAUc,IAAOC,IAAGC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,eAAVJ,CAAU,0gBAMZK,GAAUA,EAAMC,MAAMC,OAMtBF,GAAUA,EAAMC,MAAMC,OACfF,GAAUA,EAAMC,MAAMC,OAUlBF,GAAUA,EAAMC,MAAMC,M","file":"static/js/144.23cd17b9.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\n\nimport Config from \"pages/ConsolidatedViewSettings/ExposeAPICreate/config\";\nimport ListViewExposeCreate from \"pages/ConsolidatedViewSettings/ExposeAPICreate/listExposeAPICreate\";\n\nimport { loadDataExposeCreate } from \"redux/slices/consolidatedViewSettings\";\nimport SelectObject from \"components/ExternalService/selectObject\";\nimport { Radio } from \"antd\";\nconst options = [\n  { label: \"Update\", value: \"update\" },\n  { label: \"Batch update\", value: \"batch_update\" },\n];\nfunction ExposeAPICreate() {\n  const dispatch = useDispatch();\n\n  const { userRuleGlobal } = useSelector((state) => state.userReducer);\n  const { category } = useSelector((state) => state.objectsManagementReducer);\n  const [selectedObject, $selectedObject] = useState(undefined);\n  const [listObjects, $listObjects] = useState([]);\n  const [option, $option] = useState(\"update\");\n\n  const [isEdit, setIsEdit] = useState(false);\n\n  const checkRule = (rule) => {\n    if (\n      userRuleGlobal.find(\n        (item) =>\n          _.get(item, \"domain\", \"\") === \"expose_api_update\" &&\n          item.actions.includes(rule)\n      )\n    )\n      return true;\n    else return false;\n  };\n  useEffect(() => {\n    if (option && selectedObject) {\n      dispatch(\n        loadDataExposeCreate({\n          object_id: selectedObject,\n          page: 0,\n          limit: 100000,\n          expose_api_type: option,\n        })\n      );\n    }\n  }, [option, selectedObject, dispatch]);\n  const _onSelectObject = (value) => {\n    $selectedObject(value);\n  };\n\n  useEffect(() => {\n    if (Object.keys(category).length > 0) {\n      let tempObjects = [];\n      Object.entries(category).forEach(([key, val]) => {\n        val.forEach((object) => {\n          if (object.Status) {\n            tempObjects.push({\n              label: object.Name,\n              value: object._id,\n            });\n          }\n        });\n      });\n      $listObjects(tempObjects);\n    }\n  }, [category]);\n\n  return (\n    <Wrapper>\n      <SelectObject\n        nameBreadcrumb=\"Expose API Update\"\n        onChange={_onSelectObject}\n        listObjects={listObjects}\n      />\n      {selectedObject && (\n        <>\n          <Radio.Group\n            options={options}\n            onChange={(value) => $option(value.target.value)}\n            value={option}\n            optionType=\"button\"\n          />\n          <Config\n            type={option}\n            selectedObject={selectedObject}\n            isEdit={isEdit}\n            setIsEdit={setIsEdit}\n            checkRule={checkRule}\n          />\n          <ListViewExposeCreate\n            type={option}\n            selectedObject={selectedObject}\n            setIsEdit={setIsEdit}\n            checkRule={checkRule}\n          />\n        </>\n      )}\n    </Wrapper>\n  );\n}\n\nexport default ExposeAPICreate;\n\nconst Wrapper = styled.div`\n  padding: 16px 24px;\n  .ant-radio-group {\n    margin-bottom: 16px;\n  }\n  .ant-radio-button-wrapper:hover {\n    color: ${(props) => props.theme.main};\n  }\n  .ant-radio-button-wrapper-checked:not(\n      .ant-radio-button-wrapper-disabled\n    ):hover,\n  .ant-radio-button-wrapper-checked:not(.ant-radio-button-wrapper-disabled) {\n    color: ${(props) => props.theme.main} !important;\n    border-color: ${(props) => props.theme.main} !important;\n  }\n  .ant-radio-button-wrapper-checked:not(\n      .ant-radio-button-wrapper-disabled\n    ):focus-within {\n    box-shadow: none;\n  }\n  .ant-radio-button-wrapper-checked:not(\n      .ant-radio-button-wrapper-disabled\n    )::before {\n    background-color: ${(props) => props.theme.main};\n  }\n`;\n"],"sourceRoot":""}