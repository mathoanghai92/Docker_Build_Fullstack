{"version":3,"sources":["pages/Dashboard/reactGrid.js"],"names":["ReactGridLayout","WidthProvider","RGL","CallApi","React","memo","_ref","i","dispatch","useDispatch","useEffect","loadLayouts","object_id","placement","_jsx","children","Wrap","styled","div","withConfig","displayName","componentId","CustomLayout","ReactGrid","list","setList","useState","localStorage","getItem","a","JSON","parse","setItem","stringify","_jsxs","Button","danger","onClick","temp","push","Math","random","x","y","w","h","onLayoutChange","layout","map","item","onDoubleClick","filter"],"mappings":"iMAQA,MAAMA,EAAkBC,wBAAcC,KA2DhCC,EAAUC,IAAMC,MAAKC,IAAY,IAAX,EAAEC,GAAGD,EAC3BE,EAAWC,cAWf,OAVAC,qBAAU,KAERF,EACEG,aAAY,CACVC,UAAW,uBACXC,UAAW,WAEd,GAEA,CAACN,EAAGC,IACAM,cAAA,QAAAC,SAAOR,GAAS,IAGnBS,EAAOC,IAAOC,IAAGC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,eAAVJ,CAAU,iBAIjBK,EAAeL,IAAOC,IAAGC,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAAVJ,CAAU,qHAShBM,UArFGA,KAChB,MAAOC,EAAMC,GAAWC,mBAAS,IAEjChB,qBAAU,KACR,GAAIiB,aAAaC,QAAQ,cAAe,CACtC,MAAMC,EAAIC,KAAKC,MAAMJ,aAAaC,QAAQ,eAC1CH,EAAQI,EACV,IACC,IAEHnB,qBAAU,KACRiB,aAAaK,QAAQ,aAAcF,KAAKG,UAAUT,GAAM,GACvD,CAACA,IAsBJ,OACEU,eAAClB,EAAI,CAAAD,SAAA,CACHD,cAACqB,IAAM,CACLC,QAAM,EACNC,QAASA,KACP,IAAIC,EAAO,IAAId,GACfc,EAAKC,KAAK,CAAEhC,EAAGiC,KAAKC,SAAUC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IACnDpB,EAAQa,EAAK,EACbvB,SACH,QAGDD,cAACd,EAAe,CACd8C,eAAiBC,IACftB,EAAQsB,EAAO,EACfhC,SAlCCS,EAAKwB,KAAKC,GAEbf,eAACZ,EAAY,CACX,YAAW2B,EAEXC,cAAeA,KACb,IAAIZ,EAAO,IAAId,GACfc,EAAOA,EAAKa,QAAQ5C,GACXA,EAAEA,IAAM0C,EAAK1C,IAEtBkB,EAAQa,EAAK,EACbvB,SAAA,CACH,WACSD,cAACX,EAAO,CAACI,EAAG0C,EAAK1C,MATpB0C,EAAK1C,SAkCT,C","file":"static/js/147.e37c82ce.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components/macro\";\n\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport { Button } from \"antd\";\nimport { useDispatch } from \"react-redux\";\nimport { loadLayouts } from \"redux/slices/consolidatedViewSettings\";\n\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst ReactGrid = () => {\n  const [list, setList] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"local-grid\")) {\n      const a = JSON.parse(localStorage.getItem(\"local-grid\"));\n      setList(a);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"local-grid\", JSON.stringify(list));\n  }, [list]);\n\n  const renderContent = () => {\n    return list.map((item) => {\n      return (\n        <CustomLayout\n          data-grid={item}\n          key={item.i}\n          onDoubleClick={() => {\n            let temp = [...list];\n            temp = temp.filter((i) => {\n              return i.i !== item.i;\n            });\n            setList(temp);\n          }}\n        >\n          Number: <CallApi i={item.i}></CallApi>\n        </CustomLayout>\n      );\n    });\n  };\n\n  return (\n    <Wrap>\n      <Button\n        danger\n        onClick={() => {\n          let temp = [...list];\n          temp.push({ i: Math.random(), x: 0, y: 0, w: 2, h: 1 });\n          setList(temp);\n        }}\n      >\n        Add\n      </Button>\n      <ReactGridLayout\n        onLayoutChange={(layout) => {\n          setList(layout);\n        }}\n      >\n        {renderContent()}\n      </ReactGridLayout>\n    </Wrap>\n  );\n};\n\nconst CallApi = React.memo(({ i }) => {\n  let dispatch = useDispatch();\n  useEffect(() => {\n    // if (i === \"1\") {\n    dispatch(\n      loadLayouts({\n        object_id: \"obj_hopdong_38293910\",\n        placement: \"middle\",\n      })\n    );\n    // }\n  }, [i, dispatch]);\n  return <span>{i}</span>;\n});\n\nconst Wrap = styled.div`\n  width: 100%;\n`;\n\nconst CustomLayout = styled.div`\n  background: #0bb865 !important;\n  font-size: 18px;\n  color: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default ReactGrid;\n"],"sourceRoot":""}