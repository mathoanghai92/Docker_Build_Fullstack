{"version":3,"sources":["assets/images/objectsManagement/deleteObject.png","components/Modal/ModalConfirmDelete.js","components/CustomThemes/ThemeButton.js","pages/KnowledgeBaseSetting/KnowledgeBaseSetting.js"],"names":["ModalConfimDelete","_ref","dataDelete","title","decs","methodDelete","setShowModalDelete","isLoading","mask","loadData","setPositionLogo","openConfirm","setOpenConfirm","type","onDelete","dispatch","useDispatch","t","useTranslation","showModalConfirmDelete","useSelector","state","globalReducer","onClick","setShowModalConfirmDelete","_jsxs","CustomModal","visible","onCancel","width","footer","children","CustomContent","_jsx","alt","src","deleteObject","Title","Decs","CustomFooter","CustomButtonSave","size","htmlType","loading","CustomButtonCancel","withTranslation","defaultProps","styled","div","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","props","theme","main","darker","_templateObject3","_templateObject4","span","_templateObject5","_templateObject6","Modal","_templateObject7","ThemeButton","defaultBrandName","brandNameReducer","label","clickButton","className","icon","style","_Fragment","THEME_COLOR","filter","x","name","toLocaleLowerCase","theme_color","CustomButton","color","hover","Option","Select","KnowledgeBaseSetting","navigate","useNavigate","form","Form","useForm","listObject","objectsManagementReducer","listObjectField","objectsReducer","showLoadingScreen","editKnowledgeBaseSetting","knowledgeBaseSettingReducer","body","category_name","object_id","section_name","start_date","end_date","arr","setArr","useState","listOption","setListOption","setDataDelete","userRuleGlobal","userReducer","checkRule","rule","find","item","_","get","actions","includes","useEffect","getListObject","getKnowledgeBaseSetting","loadListObjectField","api_version","loadListObjectFieldSuccess","length","window","location","pathname","count","map","object","main_object","sections","section","fields","field","hidden","required","push","Notification","updateFieldKnowledgeBaseSetting","key","value","unmountKanbanViewSetting","resetFields","Row","padding","Col","Breadcrumb","Item","BreadcrumbItem","labelCol","wrapperCol","onFinish","submit","updateKnowledgeBaseSetting","CustomCol","marginRight","valuePropName","rules","validator","cb","arguments","undefined","onChange","e","disabled","showSearch","optionFilterProp","filterOption","inputValue","option","toLowerCase","indexOf","Status","_id","Name","justify","temp","target","field_id","source","deleteSetting","deleteKnowledgeBaseSetting"],"mappings":"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","file":"static/js/129.02f0fdd5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/deleteObject.73bd03c7.png\";","import Button from \"antd/lib/button\";\nimport Modal from \"antd/lib/modal\";\nimport deleteObject from \"assets/images/objectsManagement/deleteObject.png\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setShowModalConfirmDelete } from \"redux/slices/global\";\nimport { useSelector } from \"redux/store\";\nimport styled from \"styled-components\";\nimport { useTranslation, withTranslation } from \"react-i18next\";\n\nconst ModalConfimDelete = ({\n  dataDelete,\n  title,\n  decs,\n  methodDelete,\n  setShowModalDelete,\n  isLoading,\n  mask,\n  loadData,\n  setPositionLogo,\n  openConfirm,\n  setOpenConfirm,\n  type,\n  onDelete,\n}) => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { showModalConfirmDelete } = useSelector(\n    (state) => state.globalReducer\n  );\n\n  const _onSubmit = () => {\n    if (methodDelete) {\n      dispatch(\n        methodDelete({\n          ...dataDelete,\n        })\n      );\n    }\n\n    loadData();\n    dispatch(setShowModalConfirmDelete(false));\n\n    if (onDelete) {\n      onDelete();\n    }\n\n    if (setPositionLogo) {\n      setPositionLogo(dataDelete);\n    }\n\n    if (type === \"custom-view\") {\n      setOpenConfirm(false);\n    }\n  };\n  const onClick = () => {\n    if (type === \"custom-view\") {\n      setOpenConfirm(false);\n    }\n\n    dispatch(setShowModalConfirmDelete(false));\n    if (setShowModalDelete) {\n      setShowModalDelete(true);\n    }\n  };\n\n  return (\n    <CustomModal\n      title={t(\"common.confirmAction\")}\n      visible={type === \"custom-view\" ? openConfirm : showModalConfirmDelete}\n      mask={mask}\n      onCancel={() => {\n        onClick();\n      }}\n      width={400}\n      footer={null}\n    >\n      <CustomContent>\n        <img alt=\"\" src={deleteObject} />\n        <Title>\n          {t(\"common.confirmDelete\")} {title}?\n        </Title>\n        <Decs>{decs}</Decs>\n      </CustomContent>\n      <CustomFooter>\n        <CustomButtonSave\n          size=\"large\"\n          htmlType=\"submit\"\n          loading={isLoading}\n          onClick={() => {\n            _onSubmit();\n          }}\n        >\n          {t(\"common.delete\")}\n        </CustomButtonSave>\n        <CustomButtonCancel\n          size=\"large\"\n          onClick={() => {\n            onClick();\n          }}\n        >\n          {t(\"common.cancel\")}\n        </CustomButtonCancel>\n      </CustomFooter>\n    </CustomModal>\n  );\n};\n\nexport default withTranslation()(ModalConfimDelete);\n\nModalConfimDelete.defaultProps = {\n  loadData: () => {},\n  type: \"\",\n  openConfirm: false,\n  setOpenConfirm: () => {},\n};\n\nconst CustomFooter = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 34px;\n`;\n\nconst CustomButtonSave = styled(Button)`\n  background-color: ${(props) => props.theme.main};\n  color: #fff;\n  margin-right: 16px;\n  border-radius: 4px;\n\n  :hover {\n    background: ${(props) => props.theme.darker};\n    color: #fff;\n  }\n`;\n\nconst CustomButtonCancel = styled(Button)`\n  background-color: #fff;\n  border-radius: 4px;\n\n  :hover {\n    background: ${(props) => props.theme.darker};\n    color: #fff;\n  }\n`;\n\nconst CustomContent = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n\n  img {\n    width: 70px;\n    margin-bottom: 16px;\n  }\n`;\n\nconst Title = styled.span`\n  font-family: var(--roboto-500);\n  font-size: 18px;\n  line-height: 26px;\n  color: #2c2c2c;\n  text-align: center;\n`;\n\nconst Decs = styled.span`\n  font-size: 14px;\n  line-height: 22px;\n  text-align: center;\n  color: #595959;\n`;\n\nconst CustomModal = styled(Modal)`\n  .ant-modal-header {\n    border-radius: 10px 10px 0 0;\n    background: #f2f4f5;\n    padding: 7px 24px;\n  }\n\n  .ant-modal-title {\n    font-family: var(--roboto-700);\n  }\n\n  .ant-modal-close-x {\n    height: 36.6px;\n    line-height: 36.6px;\n\n    .anticon {\n      color: #141414;\n    }\n  }\n\n  .ant-modal-content {\n    border-radius: 10px;\n  }\n`;\n","import { Button } from \"antd\";\nimport { THEME_COLOR } from \"configs/color\";\nimport React from \"react\";\nimport { useSelector } from \"redux/store\";\nimport styled from \"styled-components\";\n\nconst ThemeButton = (props) => {\n  const { defaultBrandName } = useSelector((state) => state.brandNameReducer);\n  const { label, clickButton, className, icon, htmlType, style } = props;\n  return (\n    <>\n      {THEME_COLOR.filter(\n        (x) =>\n          x.name.toLocaleLowerCase() ===\n          defaultBrandName.theme_color.toLocaleLowerCase()\n      )[0] && (\n        <CustomButton\n          htmlType={htmlType}\n          style={style}\n          color={\n            THEME_COLOR.filter(\n              (x) =>\n                x.name.toLocaleLowerCase() ===\n                defaultBrandName.theme_color.toLocaleLowerCase()\n            )[0].main\n          }\n          hover={\n            THEME_COLOR.filter(\n              (x) =>\n                x.name.toLocaleLowerCase() ===\n                defaultBrandName.theme_color.toLocaleLowerCase()\n            )[0].darker\n          }\n          className={className}\n          onClick={clickButton}\n        >\n          {icon}\n          {label}\n        </CustomButton>\n      )}\n    </>\n  );\n};\n\nexport default ThemeButton;\n\nconst CustomButton = styled(Button)`\n  background-color: ${(props) => props.color};\n  border: 0px;\n  &:hover {\n    background-color: ${(props) => props.hover};\n    color: #fff;\n    border: 0px;\n  }\n  color: #fff;\n  width: max-content;\n`;\n","import { Select, Row, Col, Form, Breadcrumb } from \"antd\";\nimport ThemeButton from \"components/CustomThemes/ThemeButton\";\nimport ModalConfimDelete from \"components/Modal/ModalConfirmDelete\";\nimport { Notification } from \"components/Notification/Noti\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router\";\nimport { setShowModalConfirmDelete } from \"redux/slices/global\";\nimport { unmountKanbanViewSetting } from \"redux/slices/kanbanViewSetting\";\nimport {\n  deleteKnowledgeBaseSetting,\n  getKnowledgeBaseSetting,\n  updateFieldKnowledgeBaseSetting,\n  updateKnowledgeBaseSetting,\n} from \"redux/slices/knowledgeBaseSetting\";\nimport {\n  loadListObjectField,\n  loadListObjectFieldSuccess,\n} from \"redux/slices/objects\";\nimport { getListObject } from \"redux/slices/objectsManagement\";\nimport { useDispatch, useSelector } from \"redux/store\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\n\nconst { Option } = Select;\nconst KnowledgeBaseSetting = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [form] = Form.useForm();\n  const { listObject } = useSelector((state) => state.objectsManagementReducer);\n  const { listObjectField } = useSelector((state) => state.objectsReducer);\n  const { showLoadingScreen } = useSelector((state) => state.globalReducer);\n  const { editKnowledgeBaseSetting } = useSelector(\n    (state) => state.knowledgeBaseSettingReducer\n  );\n  const {\n    body,\n    category_name,\n    object_id,\n    section_name,\n    title,\n    start_date,\n    end_date,\n  } = editKnowledgeBaseSetting;\n  const [arr, setArr] = useState([\"\", \"\", \"\", \"\"]);\n  const [listOption, setListOption] = useState([]);\n  const [dataDelete, setDataDelete] = useState({});\n\n  const { userRuleGlobal } = useSelector((state) => state.userReducer);\n\n  const checkRule = (rule) => {\n    if (\n      userRuleGlobal.find(\n        (item) =>\n          _.get(item, \"domain\", \"\") === \"knowledge_view\" &&\n          item.actions.includes(rule)\n      )\n    )\n      return true;\n    else return false;\n  };\n\n  const submit = () => {\n    dispatch(updateKnowledgeBaseSetting(editKnowledgeBaseSetting));\n  };\n  const deleteSetting = () => {\n    dispatch(setShowModalConfirmDelete(true));\n    setDataDelete({\n      _id: editKnowledgeBaseSetting._id,\n    });\n  };\n  useEffect(() => {\n    dispatch(getListObject());\n    dispatch(getKnowledgeBaseSetting());\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (object_id) {\n      dispatch(\n        loadListObjectField({\n          api_version: \"2\",\n          object_id: object_id,\n        })\n      );\n      setArr([\"\", \"\", \"\", \"\"]);\n    }\n    // eslint-disable-next-line\n  }, [object_id]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(loadListObjectFieldSuccess([]));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (\n      listObjectField.length > 0 &&\n      window.location.pathname.includes(\"knowledge-base-setting\")\n    ) {\n      let arr = [];\n      let count = 0;\n      // eslint-disable-next-line\n      listObjectField.map((object) => {\n        // eslint-disable-next-line\n        object.main_object &&\n          object.main_object.sections.map((section) => {\n            // eslint-disable-next-line\n            return section.fields.map((field) => {\n              if (!field.hidden) {\n                if (field.required && field.type !== \"id\") {\n                  count += 1;\n                }\n                arr.push(field);\n              }\n            });\n          });\n      });\n\n      if (count < 4) {\n        Notification(\n          \"error\",\n          \"Vui lòng chọn đối tượng có tối thiểu 4 trường bắt buộc\"\n        );\n        dispatch(\n          updateFieldKnowledgeBaseSetting({\n            key: \"object_id\",\n            value: \"\",\n          })\n        );\n      } else {\n        setListOption(arr);\n      }\n    }\n    // eslint-disable-next-line\n  }, [listObjectField]);\n\n  // unmount\n  useEffect(\n    () => () => {\n      dispatch(unmountKanbanViewSetting());\n      setArr([\"\", \"\", \"\", \"\"]);\n      setListOption([]);\n      form.resetFields();\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  return (\n    <>\n      <Row style={{ padding: \"1rem 1rem 0rem 1rem\" }}>\n        <Col>\n          <Breadcrumb>\n            <Breadcrumb.Item onClick={() => navigate(\"/settings\")}>\n              {t(\"common.settings\")}\n            </Breadcrumb.Item>\n            <BreadcrumbItem>\n              {\" \"}\n              {t(\"knowledgeBase.knowledgeBase\")}{\" \"}\n            </BreadcrumbItem>\n          </Breadcrumb>\n        </Col>\n      </Row>\n      <CustomContent>\n        <Form\n          labelCol={{ span: 4 }}\n          form={form}\n          wrapperCol={{ span: 24 }}\n          onFinish={submit}\n          name=\"knowledge-base\"\n        >\n          <Row>\n            <CustomCol\n              span={object_id ? 4 : 24}\n              style={{ marginRight: \"1rem\" }}\n            >\n              <p> {t(\"knowledgeBase.selectObject\")} </p>\n              <Form.Item\n                name={\"object_id\"}\n                valuePropName={object_id}\n                rules={[\n                  {\n                    validator: (rule, value = object_id, cb) => {\n                      object_id.length === 0\n                        ? cb(\"Trường này là bắt buộc\")\n                        : cb();\n                    },\n                    required: true,\n                  },\n                ]}\n              >\n                <Select\n                  onChange={(e) => {\n                    dispatch(\n                      updateFieldKnowledgeBaseSetting({\n                        key: \"object_id\",\n                        value: e,\n                      })\n                    );\n                  }}\n                  disabled={checkRule(\"create\") === false ? true : false}\n                  value={object_id}\n                  showSearch\n                  optionFilterProp=\"children\"\n                  filterOption={(inputValue, option) => {\n                    if (option.children) {\n                      return option.children\n                        .toLowerCase()\n                        .indexOf(inputValue.toLowerCase()) >= 0\n                        ? true\n                        : false;\n                    } else if (option.label) {\n                      return option.label\n                        .toLowerCase()\n                        .indexOf(inputValue.toLowerCase()) >= 0\n                        ? true\n                        : false;\n                    }\n                  }}\n                >\n                  {\n                    // eslint-disable-next-line\n                    listObject &&\n                      listObject.map((item) => {\n                        if (item.Status) {\n                          return <Option value={item._id}>{item.Name}</Option>;\n                        } else {\n                          return null;\n                        }\n                      })\n                  }\n                </Select>\n              </Form.Item>\n            </CustomCol>\n            {object_id && (\n              <CustomCol span={19}>\n                <Row justify=\"space-between\">\n                  <Col span={11}>\n                    <Form.Item\n                      label={t(\"knowledgeBase.section\")}\n                      name={\"section_name\"}\n                      valuePropName={section_name}\n                      rules={[\n                        {\n                          validator: (rule, value = section_name, cb) => {\n                            section_name.length === 0\n                              ? cb(\"Trường này là bắt buộc\")\n                              : cb();\n                          },\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select\n                        onChange={(e) => {\n                          dispatch(\n                            updateFieldKnowledgeBaseSetting({\n                              key: \"section_name\",\n                              value: e,\n                            })\n                          );\n                          let temp = [...arr];\n                          if (e) {\n                            temp[0] = e;\n                          } else {\n                            temp[0] = \"\";\n                          }\n                          setArr(temp);\n                        }}\n                        value={section_name}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        filterOption={(inputValue, option) => {\n                          if (option.children) {\n                            return option.children\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          } else if (option.label) {\n                            return option.label\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          }\n                        }}\n                      >\n                        {\n                          // eslint-disable-next-line\n                          listOption.map((field) => {\n                            if (field.target && field.target.length > 0) {\n                              return (\n                                <Option\n                                  disabled={\n                                    arr.indexOf(field.field_id) > -1\n                                      ? true\n                                      : false\n                                  }\n                                  value={field.field_id}\n                                >\n                                  {field.name}\n                                </Option>\n                              );\n                            }\n                          })\n                        }\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                  <Col span={11}>\n                    <Form.Item\n                      label={t(\"knowledgeBase.category\")}\n                      name={\"category_name\"}\n                      valuePropName={category_name}\n                      rules={[\n                        {\n                          validator: (rule, value = category_name, cb) => {\n                            category_name.length === 0\n                              ? cb(\"Trường này là bắt buộc\")\n                              : cb();\n                          },\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select\n                        onChange={(e) => {\n                          dispatch(\n                            updateFieldKnowledgeBaseSetting({\n                              key: \"category_name\",\n                              value: e,\n                            })\n                          );\n                          let temp = [...arr];\n                          if (e) {\n                            temp[1] = e;\n                          } else {\n                            temp[1] = \"\";\n                          }\n                          setArr(temp);\n                        }}\n                        value={category_name}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        filterOption={(inputValue, option) => {\n                          if (option.children) {\n                            return option.children\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          } else if (option.label) {\n                            return option.label\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          }\n                        }}\n                      >\n                        {\n                          // eslint-disable-next-line\n                          listOption.map((field) => {\n                            if (field.source === section_name) {\n                              return (\n                                <Option\n                                  disabled={\n                                    arr.indexOf(field.field_id) > -1\n                                      ? true\n                                      : false\n                                  }\n                                  value={field.field_id}\n                                >\n                                  {field.name}\n                                </Option>\n                              );\n                            }\n                          })\n                        }\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                </Row>\n                <Row justify=\"space-between\">\n                  <Col span={11}>\n                    <Form.Item\n                      label={t(\"knowledgeBase.title\")}\n                      name={\"title\"}\n                      valuePropName={title}\n                      rules={[\n                        {\n                          validator: (rule, value = title, cb) => {\n                            title.length === 0\n                              ? cb(\"Trường này là bắt buộc\")\n                              : cb();\n                          },\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select\n                        value={title}\n                        onChange={(e) => {\n                          dispatch(\n                            updateFieldKnowledgeBaseSetting({\n                              key: \"title\",\n                              value: e,\n                            })\n                          );\n                          let temp = [...arr];\n                          if (e) {\n                            temp[2] = e;\n                          } else {\n                            temp[2] = \"\";\n                          }\n                          setArr(temp);\n                        }}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        filterOption={(inputValue, option) => {\n                          if (option.children) {\n                            return option.children\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          } else if (option.label) {\n                            return option.label\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          }\n                        }}\n                      >\n                        {\n                          // eslint-disable-next-line\n                          listOption.map((field) => {\n                            if (\n                              field.type === \"text\" ||\n                              field.type === \"textarea\"\n                            ) {\n                              return (\n                                <Option\n                                  disabled={\n                                    arr.indexOf(field.field_id) > -1\n                                      ? true\n                                      : false\n                                  }\n                                  value={field.field_id}\n                                >\n                                  {field.name}\n                                </Option>\n                              );\n                            }\n                          })\n                        }\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                  <Col span={11}>\n                    <Form.Item\n                      label={t(\"knowledgeBase.body\")}\n                      name={\"body\"}\n                      valuePropName={body}\n                      rules={[\n                        {\n                          validator: (rule, value = body, cb) => {\n                            body.length === 0\n                              ? cb(\"Trường này là bắt buộc\")\n                              : cb();\n                          },\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select\n                        value={body}\n                        onChange={(e) => {\n                          dispatch(\n                            updateFieldKnowledgeBaseSetting({\n                              key: \"body\",\n                              value: e,\n                            })\n                          );\n                          let temp = [...arr];\n                          if (e) {\n                            temp[3] = e;\n                          } else {\n                            temp[3] = \"\";\n                          }\n                          setArr(temp);\n                        }}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        filterOption={(inputValue, option) => {\n                          if (option.children) {\n                            return option.children\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          } else if (option.label) {\n                            return option.label\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          }\n                        }}\n                      >\n                        {\n                          // eslint-disable-next-line\n                          listOption.map((field) => {\n                            if (\n                              field.type === \"text\" ||\n                              field.type === \"textarea\"\n                            ) {\n                              return (\n                                <Option\n                                  disabled={\n                                    arr.indexOf(field.field_id) > -1\n                                      ? true\n                                      : false\n                                  }\n                                  value={field.field_id}\n                                >\n                                  {field.name}\n                                </Option>\n                              );\n                            }\n                          })\n                        }\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                </Row>\n                <Row justify={\"space-between\"}>\n                  <Col span={11}>\n                    <Form.Item\n                      name={\"start_date\"}\n                      label={t(\"knowledgeBase.startDate\")}\n                      valuePropName={start_date}\n                      rules={[\n                        {\n                          validator: (rule, value = start_date, cb) => {\n                            start_date.length === 0\n                              ? cb(\"Trường này là bắt buộc\")\n                              : cb();\n                          },\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select\n                        value={start_date}\n                        onChange={(e) => {\n                          dispatch(\n                            updateFieldKnowledgeBaseSetting({\n                              key: \"start_date\",\n                              value: e,\n                            })\n                          );\n                          let temp = [...arr];\n                          if (e) {\n                            temp[2] = e;\n                          } else {\n                            temp[2] = \"\";\n                          }\n                          setArr(temp);\n                        }}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        filterOption={(inputValue, option) => {\n                          if (option.children) {\n                            return option.children\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          } else if (option.label) {\n                            return option.label\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          }\n                        }}\n                      >\n                        {\n                          // eslint-disable-next-line\n                          listOption.map((field) => {\n                            if (field.type === \"date\") {\n                              return (\n                                <Option\n                                  disabled={\n                                    arr.indexOf(field.field_id) > -1\n                                      ? true\n                                      : false\n                                  }\n                                  value={field.field_id}\n                                >\n                                  {field.name}\n                                </Option>\n                              );\n                            }\n                          })\n                        }\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                  <Col span={11}>\n                    <Form.Item\n                      name={\"end_date\"}\n                      label={t(\"knowledgeBase.endDate\")}\n                      valuePropName={end_date}\n                      rules={[\n                        {\n                          validator: (rule, value = end_date, cb) => {\n                            end_date.length === 0\n                              ? cb(\"Trường này là bắt buộc\")\n                              : cb();\n                          },\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select\n                        value={end_date}\n                        onChange={(e) => {\n                          dispatch(\n                            updateFieldKnowledgeBaseSetting({\n                              key: \"end_date\",\n                              value: e,\n                            })\n                          );\n                          let temp = [...arr];\n                          if (e) {\n                            temp[3] = e;\n                          } else {\n                            temp[3] = \"\";\n                          }\n                          setArr(temp);\n                        }}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        filterOption={(inputValue, option) => {\n                          if (option.children) {\n                            return option.children\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          } else if (option.label) {\n                            return option.label\n                              .toLowerCase()\n                              .indexOf(inputValue.toLowerCase()) >= 0\n                              ? true\n                              : false;\n                          }\n                        }}\n                      >\n                        {\n                          // eslint-disable-next-line\n                          listOption.map((field) => {\n                            if (field.type === \"date\") {\n                              return (\n                                <Option\n                                  disabled={\n                                    arr.indexOf(field.field_id) > -1\n                                      ? true\n                                      : false\n                                  }\n                                  value={field.field_id}\n                                >\n                                  {field.name}\n                                </Option>\n                              );\n                            }\n                          })\n                        }\n                      </Select>\n                    </Form.Item>\n                  </Col>\n                </Row>\n                <Row justify={\"end\"}>\n                  {/* <Col span={2} style={{ marginRight: \"1rem\" }}> */}\n                  {checkRule(\"edit\") && checkRule(\"create\") ? (\n                    <ThemeButton\n                      label={t(\"common.save\")}\n                      htmlType={\"submit\"}\n                      style={{ marginRight: \"16px\" }}\n                    />\n                  ) : (\n                    \"\"\n                  )}\n                  {/* </Col> */}\n                  {editKnowledgeBaseSetting.object_id === object_id &&\n                    checkRule(\"delete\") && (\n                      // <Col span={2}>\n                      <ThemeButton\n                        label={t(\"common.delete\")}\n                        clickButton={deleteSetting}\n                      />\n                      // </Col>\n                    )}\n                </Row>\n              </CustomCol>\n            )}\n          </Row>\n        </Form>\n        <ModalConfimDelete\n          title={\"cấu hình knowledge base này\"}\n          decs=\"Sau khi xóa dữ liệu sẽ không thể hoàn tác.\"\n          methodDelete={deleteKnowledgeBaseSetting}\n          dataDelete={dataDelete}\n          isLoading={showLoadingScreen}\n        />\n      </CustomContent>\n    </>\n  );\n};\n\nexport default KnowledgeBaseSetting;\n\nconst CustomContent = styled.div`\n  padding: 1rem;\n`;\n\nconst CustomCol = styled(Col)`\n  background-color: white;\n  padding: 1rem;\n  .ant-select {\n    width: 100%;\n  }\n`;\n\nconst BreadcrumbItem = styled(Breadcrumb.Item)`\n  font-family: var(--roboto-500);\n  font-size: 18px !important;\n  color: #2c2c2c;\n  cursor: default;\n`;\n"],"sourceRoot":""}