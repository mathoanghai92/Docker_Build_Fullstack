{"version":3,"sources":["pages/Media/index.js"],"names":["withTranslation","dispatch","useDispatch","t","useTranslation","pathname","useLocation","objectID","tenantID","useParams","media","useSelector","state","authenticatedReducer","useEffect","_pathname$split$","_pathname$split$2","getMedia","link","concat","split","fileName","length","window","setTimeout","close","_jsx","Wrapper","children","Image","src","alt","styled","div","withConfig","displayName","componentId"],"mappings":"iMAmDeA,yBA1Cf,WACE,MAAMC,EAAWC,eACX,EAAEC,GAAMC,eAER,SAAEC,GAAaC,eACf,SAAEC,EAAQ,SAAEC,GAAaC,eACzB,MAAEC,GAAUC,aAAaC,GAAUA,EAAMC,uBAyB/C,OAvBAC,qBAAU,KAC+B,IAADC,EAAAC,EAAlCT,GAAYC,GAAYH,GAC1BJ,EACEgB,YAAS,CACPC,KAAK,SAADC,OACFX,EAAW,IAAMD,GAAmB,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUe,MAAMb,GAAU,KAExDc,SAAkB,OAARhB,QAAQ,IAARA,GAA4B,QAApBU,EAARV,EAAUe,MAAMb,GAAU,UAAE,IAAAQ,OAApB,EAARA,EAA8BK,MAAM,MACpC,OAARf,QAAQ,IAARA,GAA4B,QAApBW,EAARX,EAAUe,MAAMb,GAAU,UAAE,IAAAS,OAApB,EAARA,EAA8BI,MAAM,KAAKE,QAAS,KAI1D,GACC,CAACrB,EAAUM,EAAUC,EAAUH,IAElCS,qBAAU,KACJS,QAAoB,cAAVb,GACZc,YAAW,KACTD,OAAOE,OAAO,GACb,IACL,GACC,CAACf,IAGFgB,cAACC,EAAO,CAAAC,SACK,cAAVlB,EACCgB,cAAA,QAAAE,SAAOzB,EAAE,mBAETuB,cAACG,IAAK,CAACC,IAAKpB,EAAOqB,IAAI,WAI/B,IAIA,MAAMJ,EAAUK,IAAOC,IAAGC,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAVJ,CAAU,mJ","file":"static/js/151.d13a1ecd.chunk.js","sourcesContent":["import styled from \"styled-components/macro\";\nimport { getMedia } from \"redux/slices/authenticated\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Image } from \"antd\";\nimport { useTranslation, withTranslation } from \"react-i18next\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction Media() {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const { pathname } = useLocation();\n  const { objectID, tenantID } = useParams();\n  const { media } = useSelector((state) => state.authenticatedReducer);\n\n  useEffect(() => {\n    if (objectID && tenantID && pathname) {\n      dispatch(\n        getMedia({\n          link: `media/${\n            tenantID + \"/\" + objectID + pathname?.split(objectID)[1]\n          }`,\n          fileName: pathname?.split(objectID)[1]?.split(\"/\")[\n            pathname?.split(objectID)[1]?.split(\"/\").length - 1\n          ],\n        })\n      );\n    }\n  }, [dispatch, objectID, tenantID, pathname]);\n\n  useEffect(() => {\n    if (window && media === \"otherType\") {\n      setTimeout(() => {\n        window.close();\n      }, 500);\n    }\n  }, [media]);\n\n  return (\n    <Wrapper>\n      {media === \"otherType\" ? (\n        <span>{t(\"media.content\")}</span>\n      ) : (\n        <Image src={media} alt=\"media\" />\n      )}\n    </Wrapper>\n  );\n}\n\nexport default withTranslation()(Media);\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n\n  img {\n    max-height: calc(100vh - 80px);\n    max-width: calc(100vw - 80px);\n  }\n`;\n"],"sourceRoot":""}